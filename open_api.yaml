openapi: 3.0.3
info:
  title: Library Book API
  version: 1.1.0
  description: >
    A simple RESTful API for managing a library's books.
    Includes endpoints for borrowing and returning books with token-based authentication.

servers:
  - url: http://localhost:5000
    description: Local development server

paths:
  /books:
    get:
      summary: Get all books
      description: Retrieve a list of all books.
      responses:
        '200':
          description: A list of all books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      summary: Add a new book
      description: Create a new book entry in the library.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{id}:
    get:
      summary: Get a book by ID
      description: Retrieve information for a specific book.
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: The requested book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a book
      description: Update details of a specific book.
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a book
      description: Delete a book by its ID.
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: Book deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book deleted successfully
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/borrow:
    post:
      summary: Borrow a book
      description: >
        Borrow a book by ID. Requires a valid user token in the Authorization header.
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: Book borrowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: alice borrowed 'Nguyên lý Máy học'
                  book:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Book is already borrowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/return:
    post:
      summary: Return a book
      description: >
        Return a borrowed book by ID. Requires a valid user token in the Authorization header.
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: Book returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: bob returned 'Hệ điều hành'
                  book:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Book was not borrowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid or missing token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    BookId:
      name: id
      in: path
      required: true
      description: The ID of the book.
      schema:
        type: integer
        example: 1

    AuthHeader:
      name: Authorization
      in: header
      required: true
      description: User token for authentication (e.g., `alice` or `bob`).
      schema:
        type: string
        example: alice

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Nguyên lý Máy học
        author:
          type: string
          example: Phạm Duy D
        year:
          type: integer
          example: 2022
        publisher:
          type: string
          example: NXB Thông tin và Truyền thông
        genre:
          type: string
          example: Artificial Intelligence
        isbn:
          type: string
          example: 978-604-456-789-0
        available:
          type: boolean
          example: true

    NewBook:
      type: object
      required:
        - title
        - author
      properties:
        title:
          type: string
        author:
          type: string
        year:
          type: integer
        publisher:
          type: string
        genre:
          type: string
        isbn:
          type: string

    UpdateBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        year:
          type: integer
        publisher:
          type: string
        genre:
          type: string
        isbn:
          type: string
        available:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
          example: Book not found