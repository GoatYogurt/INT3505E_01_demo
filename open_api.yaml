openapi: 3.0.3
info:
  title: Book Library API
  version: 1.1.0
  description: >
    A simple RESTful API for managing books, including borrowing and returning operations.

servers:
  - url: http://localhost:5000
    description: Local development server

tags:
  - name: Books
    description: Operations related to book management
  - name: Borrowing
    description: Operations for borrowing and returning books

paths:
  /books:
    get:
      tags: [Books]
      summary: Get all books
      description: Retrieve a list of all books in the library.
      responses:
        '200':
          description: A list of all books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

    post:
      tags: [Books]
      summary: Add a new book
      description: Create a new book entry and return the created resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{id}:
    get:
      tags: [Books]
      summary: Get a book by ID
      description: Retrieve a single book's details by its ID.
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: The requested book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags: [Books]
      summary: Update a book
      description: Update the details of a specific book.
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBook'
      responses:
        '200':
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags: [Books]
      summary: Delete a book
      description: Delete a book by ID.
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: Book deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book deleted successfully
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/borrow:
    post:
      tags: [Borrowing]
      summary: Borrow a book
      description: Borrow a book by ID. Requires a valid token in the Authorization header.
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: Book borrowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user123 borrowed 'Cấu trúc dữ liệu và Giải thuật'
                  book:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Book already borrowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{id}/return:
    post:
      tags: [Borrowing]
      summary: Return a borrowed book
      description: Return a borrowed book by ID. Requires a valid token.
      parameters:
        - $ref: '#/components/parameters/BookId'
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: Book returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user123 returned 'Cấu trúc dữ liệu và Giải thuật'
                  book:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Book was not borrowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    BookId:
      name: id
      in: path
      required: true
      description: The ID of the book.
      schema:
        type: integer
        example: 1

    AuthHeader:
      name: Authorization
      in: header
      required: true
      description: Bearer token for authentication.
      schema:
        type: string
        example: Bearer abcdef123456

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Cấu trúc dữ liệu và Giải thuật
        author:
          type: string
          example: Nguyễn Văn A
        year:
          type: integer
          example: 2021
        publisher:
          type: string
          example: NXB Giáo dục
        genre:
          type: string
          example: Computer Science
        isbn:
          type: string
          example: 978-604-123-456-7
        available:
          type: boolean
          example: true

    NewBook:
      type: object
      required: [title, author]
      properties:
        title:
          type: string
        author:
          type: string
        year:
          type: integer
        publisher:
          type: string
        genre:
          type: string
        isbn:
          type: string

    UpdateBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        year:
          type: integer
        publisher:
          type: string
        genre:
          type: string
        isbn:
          type: string
        available:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
          example: Book not found